# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import githubcom_Kaiya_kafka_chan_kafkapb_kafka_chan_pb2 as githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2


class KafkaChanStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryMsgByKeyword = channel.unary_unary(
                '/kafkapb.KafkaChan/QueryMsgByKeyword',
                request_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordRequest.SerializeToString,
                response_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordReply.FromString,
                )
        self.ProduceMsgToTopic = channel.unary_unary(
                '/kafkapb.KafkaChan/ProduceMsgToTopic',
                request_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicRequest.SerializeToString,
                response_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicReply.FromString,
                )
        self.MakeMemoryLRUCache = channel.unary_unary(
                '/kafkapb.KafkaChan/MakeMemoryLRUCache',
                request_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheRequest.SerializeToString,
                response_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheReply.FromString,
                )
        self.QueryMsgByOffset = channel.unary_unary(
                '/kafkapb.KafkaChan/QueryMsgByOffset',
                request_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetRequest.SerializeToString,
                response_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetReply.FromString,
                )


class KafkaChanServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryMsgByKeyword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProduceMsgToTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeMemoryLRUCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMsgByOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KafkaChanServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryMsgByKeyword': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMsgByKeyword,
                    request_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordRequest.FromString,
                    response_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordReply.SerializeToString,
            ),
            'ProduceMsgToTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.ProduceMsgToTopic,
                    request_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicRequest.FromString,
                    response_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicReply.SerializeToString,
            ),
            'MakeMemoryLRUCache': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeMemoryLRUCache,
                    request_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheRequest.FromString,
                    response_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheReply.SerializeToString,
            ),
            'QueryMsgByOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMsgByOffset,
                    request_deserializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetRequest.FromString,
                    response_serializer=githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kafkapb.KafkaChan', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KafkaChan(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryMsgByKeyword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kafkapb.KafkaChan/QueryMsgByKeyword',
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordRequest.SerializeToString,
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByKeywordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProduceMsgToTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kafkapb.KafkaChan/ProduceMsgToTopic',
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicRequest.SerializeToString,
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.ProduceMsgToTopicReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeMemoryLRUCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kafkapb.KafkaChan/MakeMemoryLRUCache',
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheRequest.SerializeToString,
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.MakeMemoryLRUCacheReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMsgByOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kafkapb.KafkaChan/QueryMsgByOffset',
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetRequest.SerializeToString,
            githubcom__Kaiya__kafka__chan__kafkapb__kafka__chan__pb2.QueryMsgByOffsetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
